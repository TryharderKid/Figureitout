local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Discord webhook URL
local webhookUrl = "https://discord.com/api/webhooks/1368393336183849085/hd-r2quKsj1_nw5YK1JEBHlpktkTVlGJH_hIB4W5aBJyL_Ik3WdtW16mZ_kU-avGYKkI"

-- Create a RemoteEvent for clients to send their ClientID
local clientIdEvent = Instance.new("RemoteEvent")
clientIdEvent.Name = "ClientIDSubmission"
clientIdEvent.Parent = ReplicatedStorage

-- Function to send data to webhook (server-side only)
local function sendToWebhook(userId, clientId, username)
    -- Format the data as requested
    local formattedData = string.format("0,UserID,%s,Clientid,%s,Username,%s", userId, clientId, username)
    
    -- Create the payload for Discord
    local data = {
        content = formattedData
    }
    
    -- Convert the data to JSON
    local jsonData = HttpService:JSONEncode(data)
    
    -- Send the HTTP request (server-side only)
    local success, response = pcall(function()
        return HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson, false)
    end)
    
    if success then
        print("Successfully sent data to webhook for " .. username)
    else
        warn("Failed to send data to webhook:", response)
    end
end

-- Handle client ID submissions from clients
clientIdEvent.OnServerEvent:Connect(function(player, clientId)
    -- Verify the player object for security
    if player and player:IsA("Player") then
        sendToWebhook(player.UserId, clientId, player.Name)
    end
end)

-- Also log when players join (without ClientID initially)
Players.PlayerAdded:Connect(function(player)
    -- Log with placeholder for ClientID
    sendToWebhook(player.UserId, "Waiting for ClientID...", player.Name)
    
    print("Player joined: " .. player.Name .. " (" .. player.UserId .. ")")
    -- The actual ClientID will be sent by the client script
end)

print("Webhook logger initialized on server")
